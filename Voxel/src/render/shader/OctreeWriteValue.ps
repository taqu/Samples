cbuffer ConstantBuffer0 : register(b0)
{
    uint4 levelInfo; //{(voxel resolution), level, (max level), (node top)}
}

struct VSOutput
{
    float4 pos : SV_Position;
    uint vertexID : Index;
};

//StructuredBuffer
struct Voxel
{
    uint index;
    uint diffuse;
};

struct Node
{
    uint next[8];
    uint pos;
    uint data;
};

StructuredBuffer<Voxel> voxels : register(t0);

RWStructuredBuffer<Node> nodes : register(u0);
globallycoherent RWTexture3D<float> tex : register(u1);

float4 RGBAToFloat4(uint c)
{
    precise float4 ret;
    ret.r = (float)(c & 0x000000FF) /255;
    ret.g = (float)((c>>8) & 0x000000FF) /255;
    ret.b = (float)((c>>16) & 0x000000FF) /255;
    ret.a = (float)((c>>24) & 0x000000FF) /255;
    //ret.a = 1;
    return ret;
}

uint pos3ToUint(uint3 pos)
{
    return ((pos.x&0x1FFU) << 20) | ((pos.y&0x1FFU) << 10) | ((pos.z&0x1FFU));
}

uint3 uintToPos3(uint x)
{
    return uint3((x>>20)&0x1FFU, (x>>10)&0x1FFU, (x)&0x1FFU);
}

uint3 unpackCoord(uint x)
{
    uint3 coord = uintToPos3(x);
    coord *= 3;
    return coord;
}

void add(uint3 coord, float x)
{
    //tex[coord] += x;
    tex[coord] = x;
}

void main(VSOutput input)
{
    static const uint mask = ~(0x03U<<30);
    //static const uint flag = (0x01U<<31);
    Voxel voxel = voxels[input.vertexID];
    uint3 voxelPos = uintToPos3(voxel.index);

    int next =0;
    int checkIndex = 0;
    int nodeIndex = 0;
    for(uint i=1; i<=levelInfo.y; ++i){
        uint shift = (levelInfo.z - i);
        uint3 pos;
        pos.x = (voxelPos.x >> shift) & 0x01U;
        pos.y = (voxelPos.y >> shift) & 0x01U;
        pos.z = (voxelPos.z >> shift) & 0x01U;
        next = pos.x | (pos.y << 1) | (pos.z << 2);

        nodeIndex = checkIndex;
        checkIndex = nodes[checkIndex].next[next] & mask;
    }

    Node node = nodes[checkIndex];

    uint posmask = ~((0x01U << (levelInfo.z-levelInfo.y)) - 1);
    uint3 pos;
    pos.x = (voxelPos.x & posmask);
    pos.y = (voxelPos.y & posmask);
    pos.z = (voxelPos.z & posmask);

    node.pos = pos3ToUint(pos);

    //float4 diffuse = RGBAToFloat4(voxel.diffuse);
    uint3 coord = unpackCoord(node.data);

    uint sx, ex;
    uint sy, ey;
    uint sz, ez;
    float r[8];

    switch(next)
    {
    case 0:
        sx = 0; ex = 1;
        sy = 0; ey = 1;
        sz = 0; ez = 1;
        r[0] = 0.125;
        r[1] = 0.250;
        r[2] = 0.250;
        r[3] = 0.500;

        r[4] = 0.250;
        r[5] = 0.500;
        r[6] = 0.500;
        r[7] = 1.000;

        node.next[0] |= 0x01U;
        break;

    case 1:
        sx = 1; ex = 2;
        sy = 0; ey = 1;
        sz = 0; ez = 1;
        r[0] = 0.250;
        r[1] = 0.125;
        r[2] = 0.500;
        r[3] = 0.250;

        r[4] = 0.500;
        r[5] = 0.250;
        r[6] = 1.000;
        r[7] = 0.500;

        node.next[1] |= 0x01U;
        break;

    case 2:
        sx = 0; ex = 1;
        sy = 1; ey = 2;
        sz = 0; ez = 1;
        r[0] = 0.250;
        r[1] = 0.500;
        r[2] = 0.125;
        r[3] = 0.250;

        r[4] = 0.500;
        r[5] = 1.000;
        r[6] = 0.250;
        r[7] = 0.500;

        node.next[2] |= 0x01U;
        break;

    case 3:
        sx = 1; ex = 2;
        sy = 1; ey = 2;
        sz = 0; ez = 1;
        r[0] = 0.500;
        r[1] = 0.250;
        r[2] = 0.250;
        r[3] = 0.125;

        r[4] = 1.000;
        r[5] = 0.500;
        r[6] = 0.500;
        r[7] = 0.250;

        node.next[3] |= 0x01U;
        break;

    case 4:
        sx = 0; ex = 1;
        sy = 0; ey = 1;
        sz = 1; ez = 2;
        r[0] = 0.250;
        r[1] = 0.500;
        r[2] = 0.500;
        r[3] = 1.000;

        r[4] = 0.125;
        r[5] = 0.250;
        r[6] = 0.250;
        r[7] = 0.500;

        node.next[4] |= 0x01U;
        break;

    case 5:
        sx = 1; ex = 2;
        sy = 0; ey = 1;
        sz = 1; ez = 2;
        r[0] = 0.500;
        r[1] = 0.250;
        r[2] = 1.000;
        r[3] = 0.500;

        r[4] = 0.250;
        r[5] = 0.125;
        r[6] = 0.500;
        r[7] = 0.250;

        node.next[5] |= 0x01U;
        break;

    case 6:
        sx = 0; ex = 1;
        sy = 1; ey = 2;
        sz = 1; ez = 2;
        r[0] = 0.500;
        r[1] = 1.000;
        r[2] = 0.250;
        r[3] = 0.500;

        r[4] = 0.250;
        r[5] = 0.500;
        r[6] = 0.125;
        r[7] = 0.250;

        node.next[6] |= 0x01U;
        break;

    case 7:
        sx = 1; ex = 2;
        sy = 1; ey = 2;
        sz = 1; ez = 2;
        r[0] = 1.000;
        r[1] = 0.500;
        r[2] = 0.500;
        r[3] = 0.250;

        r[4] = 0.500;
        r[5] = 0.250;
        r[6] = 0.250;
        r[7] = 0.125;

        node.next[7] |= 0x01U;
        break;
    }

#if 0
    add(coord + uint3(sx,sy,sz), r[0]);
    add(coord + uint3(ex,sy,sz), r[1]);
    add(coord + uint3(sx,ey,sz), r[2]);
    add(coord + uint3(ex,ey,sz), r[3]);

    add(coord + uint3(sx,sy,ez), r[4]);
    add(coord + uint3(ex,sy,ez), r[5]);
    add(coord + uint3(sx,ey,ez), r[6]);
    add(coord + uint3(ex,ey,ez), r[7]);
#endif

    nodes[checkIndex] = node;
}
