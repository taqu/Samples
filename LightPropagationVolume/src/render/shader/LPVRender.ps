#define NUM_CASCADES 3
static const float PI = 3.14159265f;
static const float INV_PI = 0.31830988618379067153f;

static const float4 SH = float4(
     0.282094792f,
    -0.4886025119f,
     0.4886025119f,
    -0.4886025119f);

float4 calcSH(float3 c)
{
    return SH * float4(1.0, c.yzx);
}

cbuffer ConstantBuffer0 : register(b0)
{
    float4 dlDir;
    float4 dlColor;
    float4 cameraPos;
    float4 cascadeDepth;
}

cbuffer ConstantBuffer1 : register(b1)
{
    float4 diffuse;
    float4 specular;
    float4 shadow;
}

Texture3D texR : register(t0);
Texture3D texG : register(t1);
Texture3D texB : register(t2);
//Texture2D texAlbedo;
Texture2DArray<float> texShadow : register(t3);

SamplerState samLinear : register(s0);
SamplerState samShadow : register(s1);

struct VSOutput
{
    float4 position : SV_POSITION;
    float3 normal : TEXCOORD0;
    float4 texLPV : TEXCOORD1;
    float3 worldPos : TEXCOORD2;
    float4 texS[NUM_CASCADES] : TEXCOORD3;
};

void calcFresnel(out float rd, out float rs, float F0, float cosEyeHalf)
{
    float F1 = 1 - F0;
    rs = min(F0 + F1*pow(1-cosEyeHalf, 5), 1);
    rd = 1 - rs;
}
  
float4 main(VSOutput input) : SV_Target
{
    float3 L = dlDir.xyz;
    float3 N = normalize(input.normal);
    float3 E = normalize(cameraPos.xyz - input.worldPos); //視線ベクトル
    float3 H = normalize(L+E); //ハーフベクトル

    //Indirect lighting
    //float3 texLPV = (input.worldPos - LPVMin.xyz) * LPVMin.w * invLPVTexSize;
    float4 SHCoeff = calcSH(N);

    float3 indirect = float3(dot(texR.Sample(samLinear, input.texLPV.xyz), SHCoeff),
                             dot(texG.Sample(samLinear, input.texLPV.xyz), SHCoeff),
                             dot(texB.Sample(samLinear, input.texLPV.xyz), SHCoeff));

    indirect = max(0, indirect) * input.texLPV.w;
    //return float4(indirect, 1);
    //Irradiance
    float d = distance(input.worldPos, cameraPos.xyz);
    float3 shadowInfluence = 1;
    [unroll(4)]
    for(int i=0; i<NUM_CASCADES; ++i){
        if(d<cascadeDepth[i]){
            float shadowDepth = texShadow.Sample(samShadow, input.texS[i].xyz);
            shadowInfluence = (shadowDepth<input.texS[i].w)? shadow.xyz : 1;
            break;
        }
    }

    float cosEH = saturate(dot(E,H));
    float cosNL = saturate(dot(N,L));
    float cosNH = saturate(dot(N,H));

    float3 irradiance = dlColor.xyz * shadowInfluence * cosNL + indirect;

    //BRDF
    float rd, rs;
    calcFresnel(rd, rs, shadow.w, cosEH);

    float3 kd = diffuse.xyz * rd * INV_PI;
    float3 ks = specular.xyz * rs * pow(cosNH, specular.w);

    ks *= specular.w*0.039662 + 0.090587;

    float4 color;
    color.xyz = (kd + ks)*irradiance;
    color.w = 1.0f;
    return color;
}
