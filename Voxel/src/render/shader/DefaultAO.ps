static const float PI = 3.14159265f;
static const float INV_PI = 0.31830988618379067153f;

cbuffer ConstantBuffer0 : register(b0)
{
    float4 dlDir;
    float4 dlColor;
    float4 cameraPos;

    float4 eye; //eye
    float4 worldMin; //voxel area
    float4 worldMax; //voxel area
    float4 worldSize; //world size, voxel size. inv voxel size, voxel resolution
    int4 info; //num levels
}

cbuffer ConstantBuffer1 : register(b1)
{
    float4 diffuse;
    float4 specular;
    float4 transparent;
}

struct Node
{
    uint next[8];
    uint pos;
    uint data;
};

struct VSOutput
{
    float4 position : SV_POSITION;
    float3 normal : TEXCOORD0;
    float3 texS : TEXCOORD1;
    float3 worldPos : TEXCOORD2;
};


//Texture2D texAlbedo;
Texture2D texShadow : register(t0);

SamplerState samShadow : register(s0);

StructuredBuffer<Node> nodes : register(t1);
Texture3D<float> tex : register(t2);
SamplerState sam3DTex : register(s1);

//#include "SampleAO.inc"

#define WEIGHT (2.0)

static const float4 Coeff[] =
{
    float4(1.000000, 0.000000, 0.000000, 0.019894 * WEIGHT),
    float4(0.984808, 0.173648, 0.000000, 0.019592 * WEIGHT),
    float4(0.984808, -0.086824, 0.150384, 0.019592 * WEIGHT),
    float4(0.984808, -0.086824, -0.150384, 0.019592 * WEIGHT),
    float4(0.939693, 0.241845, 0.241845, 0.018695 * WEIGHT),
    float4(0.939693, -0.241845, 0.241845, 0.018695 * WEIGHT),
    float4(0.939693, -0.280167, -0.196175, 0.018695 * WEIGHT),
    float4(0.939693, 0.241845, -0.241845, 0.018695 * WEIGHT),
};

void getHemiSphereRandom(out float3 v, int i, float3 N)
{
    float3 up = (N.y>0.9)? float3(1, 0, 0) : float3(0, 1, 0);

    float3 right = cross(up, N);
    up = cross(N, right);

    v = N * Coeff[i].x + up * Coeff[i].y + right * Coeff[i].z;
}

static const uint termFlag = (0x01U<<30);
static const uint dataFlag = (0x01U<<31);
static const uint mask = ~(0x03U<<30);

uint3 uintToPos3(uint x)
{
    return uint3((x>>20)&0x1FFU, (x>>10)&0x1FFU, (x)&0x1FFU);
}

uint3 unpackCoord(uint x)
{
    uint3 coord = uintToPos3(x);
    coord *= 3;
    return coord;
}

uint3 calcVoxelPos(float3 pos)
{
	return (uint3)(pos-worldMin.xyz)*worldSize.z;
}

bool testRayAABB(inout float tmin, inout float tmax, float3 dir, float3 pos, float4 bmin, float4 bmax)
{
    tmin = 0;
    tmax = 3.402823466e+38F;
    for(int i=0; i<3; ++i){
        if(!any(dir[i])){
            if(pos[i]<bmin[i] || bmax[i]<pos[i]){
                return false;
            }
            continue;
        }
        float invD = 1/dir[i];
        float t1 = (bmin[i] - pos[i])*invD;
        float t2 = (bmax[i] - pos[i])*invD;
        if(t1>t2){
            if(t2>tmin) tmin = t2;
            if(t1<tmax) tmax = t1;
        }else{
            if(t1>tmin) tmin = t1;
            if(t2<tmax) tmax = t2;
        }
        if(tmin>tmax){
            return false;
        }
        if(tmax<0){
            return false;
        }
    }
    return true;
}

#if 0
Node traverse(float3 pos, int level, inout uint3 voxelPos, out float radius)
{
    voxelPos = calcVoxelPos(pos);
    Node node = nodes[0];
    float s = worldSize.x;
    uint next;
    for(int i=info.x-1; level<=i; --i){
        next = (voxelPos.x >> i) & 0x01U;
        next |= ((voxelPos.y >> i) & 0x01U)<<1;
        next |= ((voxelPos.z >> i) & 0x01U)<<2;
        if(0 != (node.next[next] & termFlag)){
            break;
        }
        node = nodes[node.next[next] & mask];
        s *= 0.5;
    }
    radius = s;
    return node;
}
#endif

float sampleVisibility(float3 origin, float3 dir)
{
    float tmin, tmax;
    if(!testRayAABB(tmin, tmax, dir, origin, worldMin, worldMax)){
        return 0;
    }
    if(0<tmin){
        return 0;
    }

    tmin = eye.w;
    float3 pos = origin + tmin*dir;

    float visibility = 0.0f;
    float radius;
    uint3 voxelPos;

    int level = 0;
    float step = worldSize.y*2.0;
    tmin = step*2.0;
    while(tmin<tmax){
        voxelPos = calcVoxelPos(origin + tmin*dir);

        Node node = nodes[0];
        uint next;
        int i;
        float size = worldSize.x;
        for(i=info.x-1; level<=i; --i){
            next = (voxelPos.x >> i) & 0x01U;
            next |= ((voxelPos.y >> i) & 0x01U)<<1;
            next |= ((voxelPos.z >> i) & 0x01U)<<2;

            if(0 != (node.next[next] & termFlag)){
                visibility = pow(0.125, i);
                break;
            }

            node = nodes[node.next[next] & mask];
            size *= 0.5;
        }
        if(0 == (node.data & dataFlag)){
            
            break;
        }
        tmin += step;
        step *= 2.0;
        level += 1;
    }
    return visibility;
}

void calcFresnel(out float rd, out float rs, float F0, float cosEyeHalf)
{
    float F1 = 1 - F0;
    rs = min(F0 + F1*pow(1-cosEyeHalf, 5), 1);
    rd = 1 - rs;
}
  
float4 main(VSOutput input) : SV_Target
{
    float3 L = dlDir.xyz;
    float3 N = normalize(input.normal);
    float3 E = normalize(cameraPos.xyz - input.worldPos); //視線ベクトル
    float3 H = normalize(L+E); //ハーフベクトル

    //Irradiance
    float shadowDepth = texShadow.Sample(samShadow, input.texS.xy).r;
    float shadow = 1;//step(input.texS.z, shadowDepth);

    float cosEH = saturate(dot(E,H));
    float cosNL = saturate(dot(N,L));
    float cosNH = saturate(dot(N,H));

    float3 irradiance = dlColor.xyz * cosNL * shadow;

    //BRDF
    float rd, rs;
    calcFresnel(rd, rs, transparent.w, cosEH);

    float3 kd = diffuse.xyz * rd * INV_PI;
    float3 ks = specular.xyz * rs * pow(cosNH, specular.w);

    ks *= specular.w*0.039662 + 0.090587;

    static const int Count=8;
    float visibility = 0;

#if 1
    for(int i=0; i<Count; ++i){
        float3 dir;
        getHemiSphereRandom(dir, i, N);
        visibility += sampleVisibility(input.worldPos, dir) * Coeff[i].w;
    }
#else
    visibility = sampleVisibility(input.worldPos, N);
#endif

    visibility = saturate(1-visibility);

    float4 color;
    color.xyz = (kd + ks)*irradiance * visibility;
    color.w = diffuse.w;
    return color;
}
