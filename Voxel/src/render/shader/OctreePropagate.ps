cbuffer ConstantBuffer0 : register(b0)
{
    uint4 info; //{(node top), (node end), (voxel resolution), 0}
}

struct VSOutput
{
    float4 pos : SV_Position;
    uint vertexID : Index;
};

//StructuredBuffer
struct Node
{
    uint next[8];
    uint pos;
    uint data;
};

RWStructuredBuffer<Node> nodes : register(u0);
RWTexture3D<float> tex : register(u1);

uint pos3ToUint(uint3 pos)
{
    return ((pos.x&0x1FFU) << 20) | ((pos.y&0x1FFU) << 10) | ((pos.z&0x1FFU));
}

uint3 uintToPos3(uint x)
{
    return uint3((x>>20)&0x1FFU, (x>>10)&0x1FFU, (x)&0x1FFU);
}

uint3 unpackCoord(uint x)
{
    uint3 coord = uintToPos3(x);
    coord *= 3;
    return coord;
}

void add(uint3 dst, uint3 src)
{
    tex[dst] += tex[src];
}

void propagateX(uint target, uint dx, uint3 coord, uint sx)
{
    for(uint i=info.x; i<info.y; ++i){
        if(nodes[i].pos == target){
            uint3 dstCoord = unpackCoord(nodes[i].data);
            for(int j=0; j<3; ++j){
                for(int k=0; k<3; ++k){
                    add(dstCoord + uint3(dx,k,j), coord + uint3(sx,k,j));
                }
            }
            break;
        }
    }
}

void propagateY(uint target, uint dy, uint3 coord, uint sy)
{
    for(uint i=info.x; i<info.y; ++i){
        if(nodes[i].pos == target){
            uint3 dstCoord = unpackCoord(nodes[i].data);
            for(int j=0; j<3; ++j){
                for(int k=0; k<3; ++k){
                    add(dstCoord + uint3(k,dy,j), coord + uint3(k,sy,j));
                }
            }
            break;
        }
    }
}

void propagateZ(uint target, uint dz, uint3 coord, uint sz)
{
    for(uint i=info.x; i<info.y; ++i){
        if(nodes[i].pos == target){
            uint3 dstCoord = unpackCoord(nodes[i].data);
            for(int j=0; j<3; ++j){
                for(int k=0; k<3; ++k){
                    add(dstCoord + uint3(k,j,sz), coord + uint3(k,j,sz));
                }
            }
            break;
        }
    }
}

void main(VSOutput input)
{
    Node node = nodes[input.vertexID + info.x];

    uint3 pos = uintToPos3(node.pos);
    uint3 coord = unpackCoord(node.data);
    uint end = info.z - 2;

    if(0<pos.x){
        uint target = pos3ToUint(uint3(pos.x-2, pos.y, pos.z));
        propagateX(target, 2, coord, 0);
    }

    if(pos.x<end){
        uint target = pos3ToUint(uint3(pos.x+2, pos.y, pos.z));
        propagateX(target, 0, coord, 2);
    }

    if(0<pos.y){
        uint target = pos3ToUint(uint3(pos.x, pos.y-2, pos.z));
        propagateY(target, 2, coord, 0);
    }

    if(pos.y<end){
        uint target = pos3ToUint(uint3(pos.x, pos.y+2, pos.z));
        propagateY(target, 0, coord, 2);
    }

    if(0<pos.z){
        uint target = pos3ToUint(uint3(pos.x, pos.y, pos.z-2));
        propagateZ(target, 2, coord, 0);
    }

    if(pos.z<end){
        uint target = pos3ToUint(uint3(pos.x, pos.y, pos.z+2));
        propagateZ(target, 0, coord, 2);
    }
}
